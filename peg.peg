// PEG formally describing its own ASCII syntax.
// Reference: https://bford.info/pub/lang/peg.pdf

{
    package main

    import "strings"
}

Grammar    <- Spacing def:Definition+ EndOfFile {
    return def, nil
}
Definition <- name:Identifier LEFTARROW expr:Expression {
    pos := Pos {
        Line: c.pos.line,
        Col: c.pos.col,
        Offset: c.pos.offset,
    }

    rule := Rule{
        Name: name.(string),
        Expr: expr.(string),
        Text: string(c.text),
        Pos: pos,
    }

    return rule, nil
}

Expression <- Sequence (SLASH Sequence)* {
    // Remove leading and trailing white space and comments.
    return strip(string(c.text)), nil
}
Sequence   <- Prefix*
Prefix     <- (AND / NOT)? Suffix
Suffix     <- Primary (QUESTION / STAR / PLUS)?
Primary    <- Identifier !LEFTARROW
            / OPEN Expression CLOSE
            / Literal / Class / DOT

// Lexical syntax
Identifier <- IdentStart IdentCont* Spacing {
    // Remove leading and trailing white space.
    return strings.TrimSpace(string(c.text)), nil
}
IdentStart <- [a-zA-Z_]
IdentCont  <- IdentStart / [0-9]

Literal    <- ['] (!['] Char)* ['] Spacing
            / ["] (!["] Char)* ["] Spacing

Class      <- '[' (!']' Range)* ']' Spacing
Range      <- Char '-' Char / Char
Char       <- '\\' [nrt'"[\]\\]
            / '\\' [0-2][0-7][0-7]
            / '\\' [0-7][0-7]?
            / !'\\' .

LEFTARROW  <- "<-" Spacing
SLASH      <- '/' Spacing
AND        <- '&' Spacing
NOT        <- '!' Spacing
QUESTION   <- '?' Spacing
STAR       <- '*' Spacing
PLUS       <- '+' Spacing
OPEN       <- '(' Spacing
CLOSE      <- ')' Spacing
DOT        <- '.' Spacing

Spacing    <- (Space / Comment)*
Comment    <- '#' (!EndOfLine .)* EndOfLine
Space      <- ' ' / '\t' / EndOfLine
EndOfLine  <- "\r\n" / '\n' / '\r'
EndOfFile  <- !.
